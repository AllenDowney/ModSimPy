#+title: ModSim

#+property: header-args :exports both
#+options: num:nil toc:nil
#+latex_header: \usepackage[margin=1in]{geometry}

* Exercise 1
In reality, air resistance prevents the penny from reaching this velocity.
At about 20 meters per second, the force of air resistance equals the force of gravity and the penny stops accelerating.
As a simplification, let's assume that the acceleration of the penny is a until the penny reaches 20 meters per second, and then 0 afterwards.
What is the total time for the penny to fall 381 meters?

#+BEGIN_SRC python :results output
  a = 9.80665
  termV = 20
  totalDisplacement = 381


  def displacement(a, v0, v1):
      return (v0 ** 2 + v1 ** 2) / 2 / a


  def time(a, v0, v1):
      return (v1 - v0) / a


  dToTerm = displacement(a, 0, termV)
  tToTerm = time(a, 0, termV)

  dLeft = totalDisplacement - tToTerm

  tAfterTerm = dLeft / termV

  tTot = tToTerm + tAfterTerm

  print("It will take %f seconds for the coin to fall" % tTot)
#+END_SRC

#+RESULTS:
: It will take 20.987461 seconds for the coin to fall

* Exercise 2
What happens if you spell the name of a system variable wrong?
Edit the previous cell, change the spelling of wellesley, and run the cell again.

#+BEGIN_SRC python :results output :session
  from modsim import System
  bikeshare = System(olin = 10, wellesley = 2)
  bikeshare.olin
  bikeshare.oln
#+END_SRC

#+RESULTS:
: 
: >>> 10
: Traceback (most recent call last):
:   File "<stdin>", line 1, in <module>
:   File "/usr/lib64/python3.6/site-packages/pandas/core/generic.py", line 3081, in __getattr__
:     return object.__getattribute__(self, name)
: AttributeError: 'System' object has no attribute 'oln'

* Exercise 3
Add a third attribute called babson with initial value 0, and print the state of bikeshare again.

#+BEGIN_SRC python :results output
  from modsim import System
  bikeshare = System(olin=10, wellesley=2, babson=3)
  print(bikeshare)
#+END_SRC

#+RESULTS:
: olin         10
: wellesley     2
: babson        3
: dtype: int64

* Exercise 4
In the cell below, write a few lines of code to move a bike from Wellesley to Olin and plot the updated state.

#+name: systemProgress
#+BEGIN_SRC python :noweb yes
  import pandas as pd
  import matplotlib.pyplot as plt
  plt.style.use('ggplot')


  class SystemProgress:
      def __init__(self, **kwargs):
          self.history = pd.DataFrame({key: [kwargs[key]] for key in kwargs})
          self.status = self.history.tail()

      def add_bikes(self, **kwargs):
          newStatus = self.status.copy()
          for key in kwargs:
              newStatus[key] += kwargs[key]

          self.history = pd.concat([self.history, newStatus], ignore_index=True)
          self.status = newStatus
#+END_SRC

#+RESULTS: systemProgress
: None

#+BEGIN_SRC python :results file :noweb yes
  <<systemProgress>> # reference block with SystemProgress

  bikeshare = SystemProgress(olin=10, wellesley=9)

  bikeshare.add_bikes(olin=2, wellesley=-2)
  bikeshare.add_bikes(olin=-3, wellesley=3)

  fig = bikeshare.history.plot()
  fig.figure.savefig('chap01fig/bikeshareplot')
  return 'chap01fig/bikeshareplot.png'  # required for figure to show below
#+END_SRC

#+RESULTS:
[[file:chap01fig/bikeshareplot.png]]

* Exercise 5
Define a function called =bike_to_olin= that moves a bike from Wellesley to Olin.
Run the new function and print or plot the results to confirm that it works.

#+BEGIN_SRC python :results output
  from modsim import System


  def bike_to_olin(sys):
      sys.olin += 1
      sys.wellesley -= 1


  bikeshare = System(olin=10, wellesley=10)

  for _ in range(3):
      print(bikeshare)
      bike_to_olin(bikeshare)
#+END_SRC

#+RESULTS:
: olin         10
: wellesley    10
: dtype: int64
: olin         11
: wellesley     9
: dtype: int64
: olin         12
: wellesley     8
: dtype: int64

* Exercise 6
The following function definitions start with print statements so they display messages when they run.
Run each of these functions (with appropriate arguments) and confirm that they do what you expect.
Adding print statements like this to functions is a useful debugging technique.
Keep it in mind!

#+BEGIN_SRC python :results output :sesion
  def move_bike_debug(n):
      print('Running move_bike_debug with argument', n)
      bikeshare.olin -= n
      bikeshare.wellesley += n


  def bike_to_wellesley_debug():
      print('Running bike_to_wellesley_debug')
      move_bike_debug(1)


  def bike_to_olin_debug():
      print('Running bike_to_olin_debug')
      move_bike_debug(-1)


  from modsim import System
  bikeshare = System(olin=10, wellesley=10)
  move_bike_debug(2)
  print(bikeshare)

  bike_to_wellesley_debug()
  print(bikeshare)

  bike_to_olin_debug()
  print(bikeshare)
#+END_SRC

#+RESULTS:
#+begin_example
Running move_bike_debug with argument 2
olin          8
wellesley    12
dtype: int64
Running bike_to_wellesley_debug
Running move_bike_debug with argument 1
olin          7
wellesley    13
dtype: int64
Running bike_to_olin_debug
Running move_bike_debug with argument -1
olin          8
wellesley    12
dtype: int64
#+end_example

* Exercise 7
Change the argument of legend to 'random string' and run decorate again.
You should get an error message that lists the valid location where you can put the legend.

#+BEGIN_SRC python :results file :noweb yes
  <<systemProgress>> # reference code block with class definition

  bikeshare = SystemProgress(olin=10, wellesley=9)

  bikeshare.add_bikes(olin=2, wellesley=-2)
  bikeshare.add_bikes(olin=-3, wellesley=3)

  fig = bikeshare.history.plot()
  # strange, no error here, just the default behavior. However, I
  # managed to get the error a different time, I am just unable to
  # replicate it here.
  fig.legend(loc='random')
  fig.figure.savefig('chap01fig/legendtest.png')
  return 'legendtest.png'  # required for figure to show below
#+END_SRC

#+RESULTS:
[[file:legendtest.png]]


* Exercise 8
Write a version of decorate that takes an optional parameter named loc with default value 'best'.
It should pass the value of loc along as an argument to legend.
Test your function with different values of loc.
[[https://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.legend][You can see the list of legal values here]].

#+name: decorate
#+BEGIN_SRC python :results output
  from matplotlib.pyplot import legend

  def decorate(fig, loc=0):
      fig.legend(loc=loc)
      fig.set_title('Olin-Wellesley Bikeshare')
      fig.set_xlabel('Time Step (min)')
      fig.set_ylabel('Number of bikes')

#+END_SRC

#+RESULTS: decorate

#+BEGIN_SRC python :noweb yes :results file
  # reference relevant blocks
  <<systemProgress>>
  <<decorate>>

  plt.style.use('ggplot')

  bikeshare = SystemProgress(olin=10, wellesley=9)

  bikeshare.add_bikes(olin=2, wellesley=-2)
  bikeshare.add_bikes(olin=-3, wellesley=3)

  fig = bikeshare.history.plot()
  decorate(fig, loc=0)
  fig.figure.savefig('chap01fig/legendtest1.png')

  return 'chap01fig/legendtest1.png'  # required for figure to show below
#+END_SRC

#+RESULTS:
[[file:chap01fig/legendtest1.png]]


#+BEGIN_SRC python :noweb yes :results file
  # reference relevant blocks
  <<systemProgress>>
  <<decorate>>

  plt.style.use('ggplot')

  bikeshare = SystemProgress(olin=10, wellesley=9)

  bikeshare.add_bikes(olin=2, wellesley=-2)
  bikeshare.add_bikes(olin=-3, wellesley=3)

  fig = bikeshare.history.plot()
  decorate(fig, loc=10)

  fig.figure.savefig('chap01fig/legendtest2.png')

  return 'chap01fig/legendtest2.png'  # required for figure to show below
#+END_SRC

#+RESULTS:
[[file:chap01fig/legendtest2.png]]

* Exercise 9
Combine the examples from the previous two sections to write a function named =run_steps= that takes three parameters, =named num_steps=, p1, and p2.
It should use a for loop to run step the number of times specified by =num_steps=, passing along the specified values of p1 and p2.
After each step, it should plot the updated state.
Test your function by creating a new System object, creating a new figure, and running =run_steps=.

#+BEGIN_SRC python :results file :noweb yes
  # reference relevant codeblocks
  <<systemProgress>>
  <<decorate>>

  from modsim import flip
  plt.style.use('ggplot')

  def step(df, p1=0.5, p2=0.5):
      print('p1 ->', p1)
      print('p2 ->', p2)
      if flip(p1):
          df.add_bikes(olin=-1, wellesley=1)
      if flip(p2):
          df.add_bikes(olin=1, wellesley=-1)


  def run_steps(df, num_steps, p1, p2):
      for _ in range(num_steps):
          step(df, p1, p2)


  bikeshare = SystemProgress(olin=10, wellesley=2)
  run_steps(bikeshare, 100, 0.6, 0.2)
  ax = bikeshare.history.plot()
  decorate(ax)
  ax.figure.savefig('chap01fig/runsteps.png')

  return 'chap01fig/runsteps.png'
#+END_SRC

#+RESULTS:
[[file:chap01fig/runsteps.png]]
